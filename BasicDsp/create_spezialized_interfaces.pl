#!/usr/bin/env perl
# Creates the specialized vector interfaces by copy & paste from the more the generic ones.

use strict;
use warnings;

sub parse_generic_interface {
    open GENERIC32, "<", "GenericInterfaces32.cs" or die $!;
    my %result;
    my $interface;
    my $methods = [];
    my $in_interface = 0;
    while (<GENERIC32>) {
        my $line = $_;
        chomp $line;
        if ($line =~ /public interface (.+)/) {
            $interface = $1;
        } elsif ($line =~ /\{/) {
            $in_interface = 1;
        } elsif ($line =~ /\}/) {
            $in_interface = 0;
            $result{$interface} = $methods;
            $methods = [];
        } elsif ($in_interface) {
            push @$methods, $line;
        }
    }
    close GENERIC32;
    return %result;
}

my %generic = parse_generic_interface();
# We expect the following keys: 
# IComplexVectorOperations32
# IFrequencyDomainVectorOperations32
# IDataVector32
# ITimeDomainVectorOperations32
# IRealVectorOperations32

open SPEC32, ">", "AutoGenerated/SpecializedInterfaces32.cs.tmp" or die $!;
print SPEC32 "// Auto generated code, change GenericInterfaces32.cs and run create_specialized_interfaces.pl.pl\n";
print SPEC32 "using System;\n";
print SPEC32 "// ReSharper disable UnusedMember.Global\n";
print SPEC32 "namespace BasicDsp\n";
print SPEC32 "{\n";

sub create_specific_interface {
    my ($name, $interfaces_ref, $interface_definitions_ref) = @_;
    print SPEC32 "   public interface $name : IDataVector32, IDisposable\n";
    print SPEC32 "      {\n";
    foreach my $interface (@$interfaces_ref) {
        my $methods_ref = $interface_definitions_ref->{$interface};
        foreach my $line (@$methods_ref) {
            $line =~ s/DataVector32/$name/g;
            print SPEC32 "$line\n";
        }
    }
    print SPEC32 "      }\n";
}

create_specific_interface("IRealTimeDomainVector32", ["IRealVectorOperations32", "ITimeDomainVectorOperations32"], \%generic);
create_specific_interface("IComplexTimeDomainVector32", ["ComplexVectorOperations32", "ITimeDomainVectorOperations32"], \%generic);
create_specific_interface("IRealFrequencyDomainVector32", ["IRealVectorOperations32", "IFrequencyDomainVectorOperations32"], \%generic);
create_specific_interface("IComplexFrequencyDomainVector32", ["ComplexVectorOperations32", "IFrequencyDomainVectorOperations32"], \%generic);

print SPEC32 "}\n";